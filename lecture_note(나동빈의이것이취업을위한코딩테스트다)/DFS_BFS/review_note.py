# # 그래프 탐색 알고리즘 ( DFS, BFS )
#
# # DFS 는 깊이우선탐색이라고도 부르며 그래프에서 깊은 부분을 우선적으로 탐색
# # 스택 자료구조( 재귀함수 )를 이용하며,
# # 1. 탐색 시작 노드를 스택에 삽입하고 방문처리를 합니다.
# # 2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 있으면 방문처리를 한다.
# # 3. 더 이상 2 번 과정을 수행할 수 없을 때까지 반복합니다.
#
# # ===============================================DFS 메소드 정의
# def dfs(graph, v, visited):
#     # 현재 노드를 방문처리
#     visited[v] = True
#     print(v, end=' ')
#     # 현재노드와 연결된 다른 노드를 재귀적으로 방문
#     for i in graph[v]:
#         if not visited[i]:
#             dfs(graph, i, visited)
#
# # 각 노드가 연결된 정보를 표현 ( 2차원 리스트 )
# graph = [
#     [],         # 그래프는 0번 노드를  [ ] 비워 놓는 것이 좋다.
#     [2, 3, 8],
#     [1, 7],
#     [1, 4, 5],
#     [3, 5],
#     [3, 4],
#     [7],
#     [2, 6, 8],
#     [1, 7]
# ]
#
# # 각 노드가 방문된 정보를 표현 ( 1차원 리스트 )
# visited = [False] * 9
#
# # 정의된 DFS 함수 호출
# dfs(graph, 1, visited)

#===================================================================

#=================================BFS ( 너비우선탐색 )===============
# 큐 자료구조를 사용하며 가까운 노드부터 우선적으로 탐색하는 알고리즘
# 1. 탐색시작노드를 큐에 삽입하고 방문 처리를 합니다.
# 2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를
#    모두 큐에 삽입하고 방문 처리를 합니다.
# 3. 더 이상 2번 과정을 하지 못할때까지 수행

# BFS 메소드 정의
from collections import deque

def bfs(graph, start, visited):
    # 큐 (Queue) 정의를 위해 deque 라이브러리 사용
    queue = deque([start])
    # 현재 노드를 방문처리
    visited[start]= True
    # 큐가 빌 때까지 반복
    while queue:
        # 큐에서 하나의 원소를 뽑아 출력하기
        v = queue.popleft()
        print(v, end=' ')
        # 아직 방문하지 않은 인접한 원소들을 큐에 삽입
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

graph = [
    [],         # 그래프는 0번 노드를  [ ] 비워 놓는 것이 좋다.
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

visited = [False] * 9

bfs(graph, 1, visited)